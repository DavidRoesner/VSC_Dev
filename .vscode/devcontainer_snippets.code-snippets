// Place your VSC-Development-Environment workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
// Placeholders with the same ids are connected.


{
  "Function Definition": {
    "prefix": "def",
    "body": [
      "# Function definition\n",
      "def ${1:function_name}(${2:param1: str, param2: int}) -> ${3:None}:",
      "    \"\"\"",
      "    ${4:Describe the function here}",
      "    ",
      "    Args:",
      "        ${2:param1} (str): ${5:Description of param1}",
      "        ${2:param2} (int): ${6:Description of param2}",
      "    ",
      "    Returns:",
      "        ${3:ReturnType}: ${7:Description of return value}",
      "    ",
      "    Raises:",
      "        ${8:ExceptionType}: ${9:Description of the exception}",
      "    \"\"\"",
      "    ${10:pass}",
      "",
      "    return ${11:None}"
    ],
    "description": "Create a Python function with a docstring and type annotations"
  },
  "Class Definition with Constructor": {
    "prefix": "class",
    "body": [
      "# Class definition\n",
      "class ${1:ClassName}(${2:object}):",
      "    \"\"\"",
      "    ${3:Class docstring}",
      "    \"\"\"",
      "    def __init__(self, ${4:param1: str, param2: int}):",
      "        \"\"\"",
      "        Initialize the class with the given parameters.",
      "        ",
      "        Args:",
      "            ${4:param1} (str): ${5:Description of param1}",
      "            ${4:param2} (int): ${6:Description of param2}",
      "        \"\"\"",
      "        self.param1 = param1",
      "        self.param2 = param2",
      "        ${7:pass}" 
    ],
    "description": "Create a Python class with a constructor"
  },
  "New File Structure": {
    "prefix": "newFile",
    "body": [
      "# Main imports\n",
      "import ${1:os}\n",
      "import ${2:sys}\n",
      "\n",
      "# Third-party imports\n",
      "import ${3:requests}\n",
      "\n",
      "# Local application imports\n",
      "\n",
      "# Global variables and configurations\n",
      "\n",
      "# Main code starts here\n"
   
    ],
    "description": "Template for a new Python file following PEP8 import structure"
  }
}
